package controller;
import model.Transacao;
import model.Conta;
import dao.TransacaoDAO;
import dao.ContaDAO;

import java.util.List;
import java.util.Scanner;

public class TransacaoController {
    private TransacaoDAO transacaoDAO;
    private ContaDAO contaDAO;
    private LoginController loginController;
    private int op;
    private int valor, numero, cf;
    private String data;
    private Transacao t;
    private Conta conta;
    Scanner sc = new Scanner(System.in);

    public TransacaoController() {
        this.transacaoDAO = new TransacaoDAO();
        this.contaDAO = new ContaDAO();
    }
    
    public void setLoginController(LoginController loginController) {
        this.loginController = loginController;
    }

    public void setConta(Conta conta) {
        this.conta = conta;
    }

    private void checagemTransacao () {
        if (cf == 1) {
            // Verificar se h√° uma conta definida ou buscar uma conta do usu√°rio
            if (conta == null) {
                System.out.println("‚ùå Nenhuma conta vinculada para realizar a transa√ß√£o.");
                System.out.println("üí° Dica: Crie uma conta primeiro (op√ß√£o 2) ou selecione uma conta existente.");
                return;
            }
            
            t = new Transacao(conta.getIdConta(), numero, valor, data); 
            efetuarTransacao();
        } else if (cf == 2) {
            return;
        } else {
            System.out.println("Op√ß√£o Inv√°lida.");
        }
    }

    private void efetuarTransacao () {
        if (conta == null) {
            System.out.println("Nenhuma conta vinculada para realizar a transa√ß√£o.");
            return;
        } else if (t.getValor() > conta.getSaldo()) {
            System.out.println("Saldo insuficiente.");
            return;
        } else if (t.getValor() < 0) {
            System.out.println("Erro - Valor abaixo de 0 (valor inv√°lido)");
            return;
        } else {
            double novoSaldo = conta.getSaldo() - t.getValor();
            
            // Buscar conta destino para atualizar seu saldo tamb√©m
            Conta contaDestino = contaDAO.findById(t.getIdContaDestino());
            if (contaDestino == null) {
                System.err.println("‚ùå Conta destino n√£o encontrada. Transa√ß√£o cancelada.");
                return;
            }
            
            double novoSaldoDestino = contaDestino.getSaldo() + t.getValor();
            
            // Atualizar saldo da conta origem no banco de dados
            boolean saldoOrigemAtualizado = contaDAO.updateSaldo(conta.getIdConta(), novoSaldo);
            
            if (saldoOrigemAtualizado) {
                // Atualizar saldo da conta destino no banco de dados
                boolean saldoDestinoAtualizado = contaDAO.updateSaldo(contaDestino.getIdConta(), novoSaldoDestino);
                
                if (saldoDestinoAtualizado) {
                    // Atualizar saldos nos objetos em mem√≥ria
                    conta.setSaldo(novoSaldo);
                    contaDestino.setSaldo(novoSaldoDestino);
                    
                    // Salvar transa√ß√£o no banco de dados
                    boolean transacaoSalva = transacaoDAO.insert(t);
                    
                    if (transacaoSalva) {
                        System.out.println("‚úÖ Transa√ß√£o realizada com sucesso!");
                        System.out.println("üí∞ Seu novo saldo: R$ " + novoSaldo);
                        System.out.println("üè¶ Conta destino atualizada: R$ " + novoSaldoDestino);
                        t.exibirTransacao();
                    } else {
                        System.err.println("‚ùå Erro ao salvar transa√ß√£o. Revertendo opera√ß√£o...");
                        // Reverter saldos no banco se a transa√ß√£o n√£o foi salva
                        contaDAO.updateSaldo(conta.getIdConta(), conta.getSaldo() + t.getValor());
                        contaDAO.updateSaldo(contaDestino.getIdConta(), contaDestino.getSaldo() - t.getValor());
                    }
                } else {
                    System.err.println("‚ùå Erro ao atualizar saldo da conta destino. Revertendo opera√ß√£o...");
                    // Reverter saldo da conta origem
                    contaDAO.updateSaldo(conta.getIdConta(), conta.getSaldo() + t.getValor());
                }
            } else {
                System.err.println("‚ùå Erro ao atualizar saldo da conta origem. Transa√ß√£o cancelada.");
            }
        }
    }

    private void transacao () {
        // Verificar se h√° usu√°rio logado
        if (loginController == null || !loginController.isLogado()) {
            System.out.println("‚ùå √â necess√°rio fazer login para realizar transa√ß√µes!");
            System.out.println("üí° Use o menu de login primeiro.");
            return;
        }
        
        String usuarioLogado = loginController.getNomeUsuarioLogado();
        System.out.println("üë§ Usu√°rio logado: " + usuarioLogado);
        
        // Verificar se h√° conta vinculada, se n√£o, usar conta do usu√°rio logado
        if (conta == null) {
            System.out.println("üîç Buscando conta do usu√°rio logado...");
            
            // Buscar conta origem pelo usu√°rio logado
            int idContaOrigem = buscarIdContaPorUsuario(usuarioLogado);
            if (idContaOrigem == -1) {
                System.out.println("‚ùå Usu√°rio logado n√£o possui conta cadastrada!");
                System.out.println("üí° Crie uma conta primeiro (op√ß√£o 2 do menu principal).");
                return;
            }
            
            // Buscar a conta completa
            conta = contaDAO.findById(idContaOrigem);
            if (conta != null) {
                System.out.println("‚úÖ Conta origem encontrada!");
                System.out.println("üè¶ ID da Conta: " + conta.getIdConta());
                System.out.println("üë§ Usu√°rio: " + usuarioLogado);
                System.out.println("üí∞ Saldo: R$ " + conta.getSaldo());
            }
        }

        System.out.println("\nüìã Dados da Transa√ß√£o:");
        System.out.println("üè¶ Conta Origem: ID " + conta.getIdConta() + " | Saldo: R$ " + conta.getSaldo());
        
        System.out.print("\nüíµ Valor da transa√ß√£o: R$ ");
        valor = sc.nextInt();
        sc.nextLine();

        System.out.print("üë§ Nome de usu√°rio da conta destino: ");
        String nomeUsuarioDestino = sc.nextLine();
        
        // Verificar se n√£o est√° tentando transferir para si mesmo
        if (nomeUsuarioDestino.equals(usuarioLogado)) {
            System.out.println("‚ùå N√£o √© poss√≠vel transferir para sua pr√≥pria conta!");
            System.out.println("üí° Digite o nome de usu√°rio de outra pessoa.");
            return;
        }

        System.out.print("üìÖ Data da transa√ß√£o: ");
        data = sc.nextLine();

        // Buscar ID da conta destino pelo nome de usu√°rio
        int idContaDestino = buscarIdContaPorUsuario(nomeUsuarioDestino);
        if (idContaDestino == -1) {
            System.out.println("‚ùå Usu√°rio destino n√£o encontrado!");
            System.out.println("üí° Verifique se o usu√°rio existe e tem uma conta cadastrada.");
            return;
        }

        // Mostrar resumo da transa√ß√£o
        System.out.println("\nüìã RESUMO DA TRANSA√á√ÉO:");
        System.out.println("üè¶ Origem: Conta ID " + conta.getIdConta() + " (Usu√°rio: " + usuarioLogado + ")");
        System.out.println("üè¶ Destino: Conta ID " + idContaDestino + " (Usu√°rio: " + nomeUsuarioDestino + ")");
        System.out.println("üíµ Valor: R$ " + valor);
        System.out.println("üìÖ Data: " + data);
        
        System.out.println("\n1 - Confirmar Transa√ß√£o\n2 - Cancelar");
        cf = sc.nextInt();
        sc.nextLine();

        numero = idContaDestino; // Usar o ID encontrado
        checagemTransacao();
    }

    public void transacaoMenu () {
       do { 
           // Mostrar informa√ß√µes do usu√°rio logado
           if (loginController != null && loginController.isLogado()) {
               System.out.println("\nüë§ Usu√°rio Logado: " + loginController.getNomeUsuarioLogado());
           } else {
               System.out.println("\n‚ö†Ô∏è  Nenhum usu√°rio logado");
               System.out.println("üí° √â necess√°rio fazer login para realizar transa√ß√µes");
           }
           
           // Mostrar informa√ß√µes da conta atual
           if (conta != null) {
               System.out.println("üè¶ Conta Atual: ID " + conta.getIdConta() + 
                                " | Tipo: " + conta.getTipoConta() + 
                                " | Saldo: R$ " + conta.getSaldo());
           } else {
               System.out.println("üè¶ Conta: Ser√° buscada automaticamente pelo usu√°rio logado");
           }
           
           System.out.println("\n=== MENU DE TRANSA√á√ïES ===");
           System.out.println("1 - üí∏ Nova Transa√ß√£o");
           System.out.println("2 - üìã √öltima Transa√ß√£o");
           System.out.println("3 - üìä Listar Transa√ß√µes");
           System.out.println("4 - ‚¨ÖÔ∏è  Voltar");
           System.out.print("Op√ß√£o: ");
           op = sc.nextInt();
           switch (op) {
               case 1 -> {
                   transacao();
               }
               case 2 -> {
                   if (t != null) {t.exibirTransacao();}
                   else {System.out.println("Nenhuma transa√ß√£o realizada ainda!");}
               }
               case 3 -> {
                   listarTransacoes();
               }
               case 4 -> {
                   System.out.println("Voltando...");
               }
           } 
       } while (op != 4);
    }

    public void listarTransacoes() {
        // Verificar se h√° usu√°rio logado
        if (loginController == null || !loginController.isLogado()) {
            System.out.println("‚ùå √â necess√°rio fazer login para visualizar transa√ß√µes!");
            System.out.println("üí° Use o menu de login primeiro.");
            return;
        }
        
        String usuarioLogado = loginController.getNomeUsuarioLogado();
        System.out.println("üë§ Usu√°rio logado: " + usuarioLogado);
        
        // Buscar apenas transa√ß√µes do usu√°rio logado
        List<Transacao> transacoes = transacaoDAO.getByUsuario(usuarioLogado);
        
        if (transacoes.isEmpty()) {
            System.out.println("üìã Nenhuma transa√ß√£o encontrada para este usu√°rio!");
        } else {
            System.out.println("\n=== SUAS TRANSA√á√ïES ===");
            System.out.println("üîí Mostrando apenas suas transa√ß√µes (origem e destino)");
            for (Transacao transacao : transacoes) {
                exibirTransacaoSegura(transacao);
            }
        }
    }

    /**
     * Exibe dados da transa√ß√£o sem informa√ß√µes sens√≠veis
     */
    private void exibirTransacaoSegura(Transacao transacao) {
        String usuarioLogado = loginController.getNomeUsuarioLogado();
        
        // Determinar se √© transa√ß√£o de entrada ou sa√≠da
        boolean isSaida = conta != null && transacao.getIdContaOrigem() == conta.getIdConta();
        
        System.out.println("üí∏ Transa√ß√£o ID: " + transacao.getIdTransacao());
        
        if (isSaida) {
            System.out.println("üì§ Tipo: Sa√≠da (Voc√™ enviou)");
            System.out.println("üí∞ Valor: -R$ " + transacao.getValor());
        } else {
            System.out.println("üì• Tipo: Entrada (Voc√™ recebeu)");
            System.out.println("üí∞ Valor: +R$ " + transacao.getValor());
        }
        
        System.out.println("üìÖ Data: " + transacao.getData());
        System.out.println("üè¶ Conta Origem: " + transacao.getIdContaOrigem());
        System.out.println("üè¶ Conta Destino: " + transacao.getIdContaDestino());
        System.out.println("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
    }

    /**
     * Busca o ID da conta pelo nome de usu√°rio dinamicamente
     */
    private int buscarIdContaPorUsuario(String nomeUsuario) {
        return contaDAO.buscarIdContaPorUsuario(nomeUsuario);
    }
}
